{
  "html": [
    {
      "id": 1,
      "language": "html",
      "topic": "introduction",
      "body": "some text",
      "code": [
        "<!DOCTYPE html>\r<html>\r <head>\r  <title>Introduction to html</title>\r<head>\r<body>\r <h1>Hyper Text Markup Language</h1>\r</body>\r</html>",
        "console.log('hello')"
      ]
    },
    {
      "topic": "tables",
      "body": "# bjkdjkvf\n ### this shit is messed\n __pre__\n```javascript\nconst name = 1\nconsole.log(name)\n```\n",
      "language": "html",
      "id": 2
    },
    {
      "topic": "some topic",
      "body": "some goobdy gook",
      "language": "html",
      "id": 3
    }
  ],
  "css": [
    {
      "id": 1,
      "language": "css",
      "topic": "selectors",
      "body": "## this article is about css selectors.\n```css\n.foo{\n\tlength: 1px\n}\n```\n"
    },
    {
      "topic": "stylesheets",
      "body": "A stylesheet is simply a CSS file. A style sheet will contain some CSS rules targeting different elements in the DOM via the use of selectors. A CSS file is saved with the extension `.css`.\n\n## Syntax\nCSS has a very simple syntax, we just have a block of rules that is attached to a selector. The rules are code blocks that are separated by curly braces. And it contain key-value pairs. Let's see an example of a  basic CSS rule.\n\n```css\nselector {\n  key: value;\n  key: value;\n }\n``` \n\nThe above cod block shows the basic syntax of CSS, although there is much to it than this, but for simplicity and beginners sake we will keep it at this level. The keys are attributes of elements we want to control while the values represent values we that the attribute should hold",
      "language": "css",
      "id": 2
    }
  ],
  "javascript": [
    {
      "topic": "introduction",
      "body": "JavaScript stands as the most used programming language and there's a reason why. JavaScript is used in the browser for client side scripting which we will focus on in this course. JavaScript is also used on the server as node js, it can be embedded into a platform, can be used for desktop/mobile development and much more. JavaScript was created by Brendan Eich at netscape in [year]. He built the runtime and the compiler in 10 days. JavaScript was released as LiveScript before it was later renamed three months later to JavaScript. JavaScript out grew competition from JScript (By Microsoft) and Steadily the community behind JavaScript increased with the release of the mozilla and chrome, and ECMA script specification for JavaScript further reduced the difference in JavaScript implementation. JavaScript grew from a tool that was good to have to becoming a necessity. Ask any software developers around you about JavaScript.\n\n#### What is JavaScript ?\n\nJavaScript is a high level, object oriented, event driven multiparagdim  programming language that is just in time compiled, JavaScript comes from the C family and shares some syntax similarities with them e.g curly braces to separate blocks of code. JavaScript is dynamically typed, supports asynchronous operations, prototype based, functional and much more...\n\nSome of the things we just read earlier might not make much sense to you right now but by the time you are through with this starter course, you will get a good grip of what  this all means. JavaScript is the defacto scripting language of the web and together with HTML and CSS they make up the the three core technologies of the web.\n\nJavaScript provides us with APIs (application programming interface) that allows us to work with and format Dates, numbers, strings, functions and objects. In client side scripting, JavaScript has access to the HTML document of a page that it is attached to. You can manipulate and traverse this HTML document through the DOM (Document Object Model)\n\nJavaScript also provide an API for us to interact and control the browser, and we call it the BOM (Browser Object Model). We can use this API to control certain browser behaviour through JavaScript.\n\n#### Why JavaScript\n\nJavaScript has a huge ecosystem behind it, lots of libraries, tools and frameworks have built on top of JavaScript and they influence the way a developer writes their code. JavaScript has hidden within it, features that you can exploit to build interactive, dynamic and high performance web site while presenting itself in such a simple layer. JavaScript has grown and gone through major overhall over the ages and the ECMA script specification is maintained on it's github page, it is managed by a open source committee and thus it represents the absolute tool to solving problems associated with frontend development. There are also frameworks that simplify building complex apps with JavaScript, it has it's own registry where it maintains external modules written by different programmers that we can in-cooperate into our code to achieve a particular result. Libraries like jQuery make things liike DOM traversal easy and ajax request a breeze. \n\nJavaScript can also be used on the server as node js, it is used in electron for Desktop app development and exposes some native operating system API to JavaScript, it can be embedded on IOT platforms like raspberry pi, so you see? There is no shortage of usage or development of JavaScript and the community behind it isn't going anywhere so it is best that we equip ourselves with fundamental and deep understanding of how JavaScript works, how it can be used and what things it can be used to achieve.\n\n",
      "language": "javascript",
      "id": 1,
      "next": "variables"
    },
    {
      "topic": "variables",
      "body": "JavaScript bears some syntax similarities with the C family of languages, things like the use of curly braces to indent code and the rest. A JavaScript file must be saved with the extension .js, we can attach that file to an HTML page so the browser will parse and run the code, for now we will assume that JavaScript can only be run in a browser, so we are going to be doing most of our scripting in files attached to HTML documents or inside HTML documents. \n\nJavaScript can be added to a web page by the means of a script tag we give that tag an attribute of src which is equal to the location of the file on the server. The script tag can be placed inside the head or body element.\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n      <title>JavaScript for beginners</title>\n      <script src=\"link/to/file.js\"></script>\n    </head>\n<body>\n    <!-- Or we can do it in the body of the tag -->\n    <script src=\"link/to/file.js\"></script>\n</body>    \n</html>\n\n```\n\nWe can write all our code inside the  file we are linking to and i advise that you stick to this. When you load up the HTML page in a browser, our JavaScript code we are linking to becomes parsed by the browser and is currently controlling the document. Let's see how we can add variables to a JavaScript file.\n\n\n\n## Variables\n\nVariables are simply named reference to values, that is we put a value we are going to be working with inside a variable and when we want to make a reference to the value, we simply call the variable, much like your name is a reference to you and whoever want to call you, calls your name and you reply accordingly.\n\nThere are three main means for adding variables to a JavaScript code, we can use three reserved key words, either we use const, let or var and we will look at the implications of each keyword. Keywords are reserved words that are used internally in the JavaScript engine to represent some native code and we can not name the variables we are going to create after them.\n\n```javascript\nvar name = value; // first way using var keyword\nlet name2 = value // another method using let keyword\nconst NAME4 = value // we can also declare constants using the const keyword\n```\n\nBy Default JavaScript variables are not typed and they are dynamic, we can declare a variable to be a string (word) and later we change it to a number or a boolean.\n\nThe first method of defining variables used to be with the var keyword, however it had a lot of drawbacks, we could redeclare a variable  we already declared and that is would be fine by the compiler, this could lead to certain bugs that were difficult to find and trace, then ES6 came the let and const keywords\n\nThe let keyword allowed us to overcome this drawback, any variable declared with the let keyword cannot be redeclared again, we can only change it's value. It also prevents global scoping of a variable, this means that variable declared with the let keyword are tied to a particular function and it's value will be equal to what we set it inside that function, in another thing we can declare it to be equal to something else and there won't be an issue.\n\nVariables declared with the const keyword are constants, that is once we declare a variable with the const keyword we cannot change it's value later.\n\n```javascript\nvar variable = value\n// some computation and later we can\nvar variable = another value // because of the var keyword\n\nlet anotherVariable = value // different from var keyword because later we cannot do the following\n// some computation\nlet anotherVariable = another value // will throw an error tellinfg us we can't redeclare it again.\n\n//for variables that you don't want to change, you could use the const keyword\nconst CONSTANT = 'value' // we cnnot redclare or reassign it another value\n```\n\n### Rules about Naming Variables\n\n* JavaScript is case sensitive this implies that it pays attention to which case a letter or word is written in, thus name is  not the same thing as Name or nAmE. in JavaScript, they are three different variables.\n* Variables can begin with any alphabet and the underscore character_ however it cannot begin with numbers or symbols/signs although we can use numbers else where in the name of the variable, but not at the beginning, thus we cannot have 2name or -name but we can have _name or name1 or name, you get the point?\n* Constants should be named in uppercase\n\n## Comments\n\nWe can add comments to our JavaScript code by using double forward slash and by so doing, comment out a single line of code like we did above, the JavaScript engine will ignore whatever we comment. We can also do multi-line comments.\n\n```javascript\n/* This is the syntax for a comment spaning accross multiple lines\nlet variable = value;\n*/\nconst CONSTANT = value\n```\n\nWe will look at variables more in the next lesson. ",
      "language": "javascript",
      "id": 2
    }
  ]
}
